package io.sited.db.impl.jdbc;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import io.sited.db.Entity;
import io.sited.db.Field;
import io.sited.db.Id;
import io.sited.db.impl.EntityId;
import io.sited.util.CodeBuilder;
import io.sited.util.DynamicInstanceBuilder;

import java.sql.Connection;
import java.util.List;
import java.util.function.Function;

/**
 * @author chi
 */
public class Table<T> {
    public final Class<?> entityClass;

    public final String name;
    public final List<String> columns;
    public final TableMapper<T> mapper;
    public final EntityId<T> id;
    public final Function<T, Object[]> insertParams;
    public final Function<T, Object[]> updateParams;

    public Table(Class<T> entityClass) {
        this.entityClass = entityClass;
        this.name = entityClass.getDeclaredAnnotation(Entity.class).name();
        id = EntityId.of(entityClass);
        this.mapper = new TableMapperBuilder<>(entityClass).build();


        ImmutableList.Builder<String> builder = ImmutableList.builder();
        for (java.lang.reflect.Field field : entityClass.getDeclaredFields()) {
            if (field.isAnnotationPresent(Field.class)) {
                builder.add(field.getDeclaredAnnotation(Field.class).name());
            }
        }
        this.columns = builder.build();

        insertParams = this.insertParams();
        updateParams = this.updateParams();
    }

    public SQLBuilder sql(String sql, Connection connection) {
        return new SQLBuilder(this, sql, connection);
    }

    public String deleteSQL(Connection connection) {
        return new SQLBuilder(this, id.name() + "=?", connection).deleteSQL();
    }

    public String getSQL(Connection connection) {
        return new SQLBuilder(this, id.name() + "=?", connection).selectOneSQL();
    }

    public String insertSQL() {
        return new SQLBuilder(this, null).insertSQL();
    }

    public String updateSQL(Connection connection) {
        return new SQLBuilder(this, id.name() + "=?", connection).updateSQL();
    }

    public String batchGetSQL(int size, Connection connection) {
        StringBuilder b = new StringBuilder(id.name());
        b.append(" in (");
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (count != 0) {
                b.append(',');
            }

            count++;
            b.append('?');

            if (count % 1000 == 0 && i != size - 1) {
                count = 0;
                b.append(") OR (");
            }
        }
        b.append(')');
        return new SQLBuilder(this, b.toString(), connection).selectSQL();
    }

    private Function<T, Object[]> insertParams() {
        List<String> paramFields = Lists.newArrayList();

        boolean first = true;
        for (java.lang.reflect.Field field : entityClass.getDeclaredFields()) {
            if (field.isAnnotationPresent(Field.class)) {
                paramFields.add(field.getName());
                if (first) {
                    first = false;
                }
            } else if (field.isAnnotationPresent(Id.class) && !this.id.isAutoGenerated()) {
                paramFields.add(field.getName());
                if (first) {
                    first = false;
                }
            }
        }

        CodeBuilder builder = new CodeBuilder();
        builder.append("public Object apply(Object value) {\n")
            .indent(1).append("%s entity = (%s) value;", entityClass.getCanonicalName(), entityClass.getCanonicalName())
            .indent(1).append("Object[] params = new Object[%s];\n", paramFields.size());

        int index = 0;
        for (String paramField : paramFields) {
            builder.indent(1).append("params[%s] = entity.%s;\n", index, paramField);
            index++;
        }

        builder.append("return params;\n")
            .append("}");

        return new DynamicInstanceBuilder<Function<T, Object[]>>(Function.class, Table.class.getCanonicalName() + "$" + entityClass.getSimpleName() + "$ParamBuilder")
            .addMethod(builder.build())
            .build();
    }

    private Function<T, Object[]> updateParams() {
        List<String> paramFields = Lists.newArrayList();

        for (java.lang.reflect.Field field : entityClass.getDeclaredFields()) {
            if (field.isAnnotationPresent(Field.class)) {
                paramFields.add(field.getName());
            }
        }

        paramFields.add("id");

        CodeBuilder builder = new CodeBuilder();
        builder.append("public Object apply(Object value) {\n")
            .indent(1).append("%s entity = (%s) value;", entityClass.getCanonicalName(), entityClass.getCanonicalName())
            .indent(1).append("Object[] params = new Object[%s];\n", paramFields.size());

        int index = 0;
        for (String paramField : paramFields) {
            builder.indent(1).append("params[%s] = entity.%s;\n", index, paramField);
            index++;
        }

        builder.append("return params;\n")
            .append("}");

        return new DynamicInstanceBuilder<Function<T, Object[]>>(Function.class, Table.class.getCanonicalName() + "$" + entityClass.getSimpleName() + "$ParamBuilder")
            .addMethod(builder.build())
            .build();
    }
}
